#! /bin/sh
# This file is provided under a dual BSD/GPLv2 license.  When using or
# redistributing this file, you may do so under either license.
#
# GPL LICENSE SUMMARY
#
#  Copyright (c) 2015 Intel Corporation, All rights reserved.
#  Copyright (c) 2007, 2008 QLogic Corporation, All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# BSD LICENSE
#
#  Copyright (c) 2015 Intel Corporation, All rights reserved.
#  Copyright (c) 2007, 2008 QLogic Corporation, All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  - Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  - Neither the name of Intel Corporation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# script to set VL arbitration registers via diag interface. This
# is used because opensm doesn't seem to be cooperating. It is only
# safe to use this scheme if there is no SM running on the subnet,
# as there is no locking.

if [ "$REAL_RUN" = "" -o "$REAL_RUN" = "0" ]
then
  export REAL_RUN=0
else
  export REAL_RUN=1
fi

# Interface to test is first command-line parameter.
ifc=$1
if [ -z "$ifc" ]
then
  ifc=0:1
fi

test_spec=$2

# Split interface spec into unit and port
port=`echo $ifc | cut -s -d ':' -f2`
if [ "$port" = "" ]
then
  port=1
fi

unit=`echo $ifc | cut -d ':' -f1`
if [ "$unit" = "" ]
then
  unit=0
fi

# Reconstruct interface spec from given/defaulted pieces
export ifc=${unit}:${port}

logdir=/scratch/vla_logs
if [ ! -d $logdir ]
then
  mkdir -p $logdir
fi
base_test_spec=`basename $test_spec`
logfile=$logdir/arbset_${base_test_spec}.log

# Locate self, and by implication other scripts and files
if [ "$script_dir" = "" ]
then
  script_dir=`dirname $0`
  # If it is relative, prepend current dir
  leader=`echo $script_dir | cut -c1`
  if [ "$leader" != '/' ]
  then
    curdir=`pwd`
    script_dir="${curdir}/${script_dir}"
  fi
  export script_dir
fi

dsname=/tmp/vla_diag_script_$$

cleanup ()
{
  echo >&2 cleaning up
  rm -f $dsname
  trap 0
}

set_arb_tbl ()
{
  tbl=$1
  tbl_ents=$2
  tblbase=0
  case "$tbl" in
    "high_limit" )
      addr=`expr  \( $port \* 4096 \) + 3008`
      hilim=$2
      printf "w 0x%X 0x%X\n" $addr $hilim
    ;;
    "vlarb_low" )
      tblbase=3072 # 0xC00
    ;;
    "vlarb_high" )
      tblbase=3584 # 0xE00
    ;;
    * )
      echo >&2 "No $tbl table"
      cleanup
      exit 1
    ;;
  esac
  entry=1
  while [ $tblbase -ne 0 ]
  do
    addr=`expr \( $port \* 4096 \) + $tblbase`
    ent=`echo $tbl_ents | cut -d ',' -f$entry`
    if [ "$ent" = "" ]
    then
      ent="0:0"
    fi
    vl=`echo $ent | cut -d ':' -f1`
    weight=`echo $ent | cut -d ':' -f2`
    data=`expr \( $vl \* 65536 \) + $weight`
    printf "w 0x%X 0x%05X\n" $addr $data
    tblbase=`expr $tblbase + 8`
    entry=`expr $entry + 1`
    if [ $entry -gt 16 ]
    then
      break
    fi
  done
}


trap cleanup 1 2 15

if [ $REAL_RUN -ne 0 ]
then
  /etc/init.d/opensmd stop
  ifdown ib0
  ifdown ib1
  sleep 2
fi

if [ "$test_spec" = "" ]
then
  test_spec=/tmp/vla_dummy_spec_$$
  echo qos_high_limit=1 > $test_spec
  echo "qos_vlarb_low=0:1,1:1,2:2,3:0,0:1,1:2,2:1,3:0" >> $test_spec
  echo "qos_vlarb_high=2:0,0:0,3:1,0:0,2:0,0:0,3:1,0:0" >> $test_spec
fi

# Start diags script with de-assertion of IBVLarb
# then two different values of High_limit, to shake it loose
export SENDCTRL=`printf "0x%d1c0" $port`
echo -e "m $SENDCTRL 0 0x8000\n" > $dsname
set_arb_tbl high_limit 1 >> $dsname
set_arb_tbl high_limit 0 >> $dsname

for valspec in high_limit vlarb_low vlarb_high
do
  specline=`grep "^qos_${valspec}=" $test_spec`
  val=`echo $specline | cut -s -d '=' -f2`
  if [ "$val" != "" ]
  then
    set_arb_tbl $valspec "$val" >> $dsname
  fi
done

# finish diag scripts with assertion of IBVLArbEn
echo -e "m $SENDCTRL 0x8000 0x8000\nq\n" >> $dsname

echo "Diags Script to modify chip tables" | tee -a $logfile

if [ $REAL_RUN -ne 0 ]
then
  cat $dsname | tee -a logfile
  ipath_diags -u$ifc < $dsname > /dev/null
  sleep 1
  echo result of smpquery vlarb | tee -a logfile
  smpquery -D vlarb 0 | tee -a $logfile
  addr=`expr  \( $port \* 4096 \) + 3008`
  echo "Current SendDtrl and high_limit" | tee -a $logfile
  printf "r $SENDCTRL\nr 0x%X\nq\n" $addr | ipath_diags -u$ifc | grep "^0x"
else
  cat $dsname
fi

rm -f $dsname
if [ "$test_spec" = "/tmp/vla_dummy_spec_$$" ]
then
  rm -f $test_spec
fi

